/*
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

Contact and Copyright

The mobile service selector iSeM (1.1), S2P2P, DSDR and S3M Peer was developed
at the German Research Center for Articifial Intelligence DFKI GmbH (http://ww.dfki.de)
in Saarbrücken, Germany.

Copyright: DFKI, 2014, All Rights Reserved.

For bug reports, other technical problems and feature requests please contact Patrick Kapahnke: patrick.kapahnke@dfki.de

For general scientific inquiries please contact PD Dr. Matthias Klusch: klusch@dfki.de
*/

package de.dfki.owls2pddxml_2_0;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Logger;

import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.model.OWLException;
import org.semanticweb.owl.model.OWLIndividual;
import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.OWLOntologyManager;

import de.dfki.pddxml.relaxer.Action;
import de.dfki.pddxml.relaxer.Actions;
import de.dfki.pddxml.relaxer.Conjunction;
import de.dfki.pddxml.relaxer.Domain;
import de.dfki.pddxml.relaxer.GoalState;
import de.dfki.pddxml.relaxer.InitState;
import de.dfki.pddxml.relaxer.PDDXMLObject;
import de.dfki.pddxml.relaxer.PDDXMLObjects;
import de.dfki.pddxml.relaxer.Predicate;
import de.dfki.pddxml.relaxer.Predicates;
import de.dfki.pddxml.relaxer.Problem;
import de.dfki.pddxml.relaxer.Requirements;
import de.dfki.pddxml.relaxer.Types;

public class OWLS2PDDXML {
	
	private static URI				OWLS_SERVICE = URI.create("http://www.daml.org/services/owl-s/1.1/Service.owl#Service");
	
	public static final Logger LOGGER = Logger.getLogger(OWLS2PDDXML.class
			.getName());

	private DomainHelper fConverterContext;

	private Conjunction fInitState;
	private Conjunction fGoalState;

	private OWLKnownFactConverter fInitKnownOWLFactConverter;
	private OWLFactConverter fInitUnknownOWLFactConverter;
	private OWLKnownFactConverter fGoalOWLFactConverter;

	private OWLSServiceConverter fOWLSServiceConverter;

	private String fDomainName;

	private PDDXMLExpressionCleaner fPDDXMLExpressionCleaner;

	/**
	 * OWL ontology manager used for the whole conversion process.
	 */
	private OWLOntologyManager owlManager = null;

	private OWLOntologyManager owlGoalManager = null;

	public OWLS2PDDXML(String domainName) {
		this(domainName, new File("."), OWLManager.createOWLOntologyManager());
	}

	public OWLS2PDDXML(String domainName, File cacheDirectory) {
		this(domainName, cacheDirectory, OWLManager.createOWLOntologyManager());
	}

	public OWLS2PDDXML(String domainName, OWLOntologyManager owlManager) {
		this(domainName, new File("."), owlManager);
	}

	public OWLS2PDDXML(String domainName, File cacheDirectory,
			OWLOntologyManager owlManager) {
		this.owlManager = owlManager;
		// this is a new manager, because it must not be related to the overall
		// manager representing the current world state
		this.owlGoalManager = OWLManager.createOWLOntologyManager();

		fConverterContext = new DomainHelper();
		fInitState = new Conjunction();
		fGoalState = new Conjunction();
		StateHelper initialStateHelper = new StateHelper();
		fInitKnownOWLFactConverter = new OWLKnownFactConverter(
				fConverterContext, initialStateHelper, owlManager);
		fInitUnknownOWLFactConverter = new OWLFactConverter(fConverterContext,
				initialStateHelper, owlManager);
		fGoalOWLFactConverter = new OWLKnownFactConverter(fConverterContext,
				new StateHelper(), this.owlGoalManager);
		fOWLSServiceConverter = new OWLSServiceConverter(fConverterContext,
				owlManager);
		fDomainName = domainName;
		fPDDXMLExpressionCleaner = new PDDXMLExpressionCleaner();
	}

	public void addToInitialState(URI ontologyURI) throws OWLException {
		OWLOntology ontology = owlManager
				.loadOntologyFromPhysicalURI(ontologyURI);

		for (OWLIndividual individual : ontology.getIndividualsInSignature()) {
			individual.accept(fInitKnownOWLFactConverter);
			fInitState.addExpression(fInitKnownOWLFactConverter
					.getPDDXMLExpression());
		}
	}

	public void addToGoalState(URI ontologyURI) throws OWLException {
		// use temporary OWL manager for goal, since this ontology does not
		// relate to the overall world state
		OWLOntology ontology = owlGoalManager
				.loadOntologyFromPhysicalURI(ontologyURI);

		for (OWLIndividual individual : ontology.getIndividualsInSignature()) {
			individual.accept(fGoalOWLFactConverter);
			fGoalState.addExpression(fGoalOWLFactConverter
					.getPDDXMLExpression());

			individual.accept(fInitUnknownOWLFactConverter);
			fInitState.addExpression(fInitUnknownOWLFactConverter
					.getPDDXMLExpression());
		}
	}

	public void addServices(URI ontologyURI) throws OWLException, IOException {
		OWLOntology serviceOnt = owlManager.loadOntology(ontologyURI);
		
		// find all services (URI)
		Set<OWLIndividual> services = owlManager.getOWLDataFactory().getOWLClass(OWLS_SERVICE).getIndividuals(serviceOnt);
		
		URI serviceUri;
		for(OWLIndividual service : services) {
			// TODO only named services accepted for now...
			if(service.isAnonymous())
				continue;
			
			serviceUri = ((OWLIndividual) service).getURI();
			System.out.println("Adding service " + serviceUri.toString());
			fOWLSServiceConverter.convert(serviceUri);
		}	
		
//		OWLKnowledgeBase kb = OWLFactory.createKB();
//		kb.read(ontologyURI);
//		// for(Service s : (List<Service>)kb.getServices(false))
//		for (Service s : kb.getServices()) {
//			System.out.println("Adding service " + s);
//			fOWLSServiceConverter.convert(s);
//		}
	}

	public Problem getProblem() {
		Problem problem = new Problem();

		problem.setDomain(fDomainName);

		PDDXMLObjects objects = new PDDXMLObjects();
		objects.addPDDXMLObject(fConverterContext.getPDDXMLObjects().toArray(
				new PDDXMLObject[0]));
		problem.setPDDXMLObjects(objects);

		fInitState.enter(fPDDXMLExpressionCleaner);
		fGoalState.enter(fPDDXMLExpressionCleaner);

		InitState initState = new InitState();
		initState.setExpression(fInitState);
		problem.setInitState(initState);

		GoalState goalState = new GoalState();
		goalState.setExpression(fGoalState);
		problem.setGoalState(goalState);

		return problem;
	}

	public Domain getDomain() {
		Domain domain = new Domain();

		domain.setName(fDomainName);

		Requirements reqs = new Requirements();
		domain.setRequirements(reqs);

		Types types = new Types();
		domain.setTypes(types);

		Predicates predicates = new Predicates();
		predicates.addPredicate(fConverterContext.getPredicates().toArray(
				new Predicate[0]));
		domain.setPredicates(predicates);

		Actions actions = new Actions();
		for (Iterator<Action> it = fConverterContext.actionIterator(); it
				.hasNext();) {
			actions.addAction(it.next());
		}
		actions.enter(fPDDXMLExpressionCleaner);
		domain.setActions(actions);

		return domain;
	}

}
